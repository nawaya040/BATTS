// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "balancePM_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rotation_matrix
mat rotation_matrix(int n);
RcppExport SEXP _balancePM_rotation_matrix(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rotation_matrix(n));
    return rcpp_result_gen;
END_RCPP
}
// run_adaboost
List run_adaboost(mat X, ivec group_labels, int num_trees, int max_resol, double learn_rate, vec L_candidates, double alpha_cutpoint, ivec labels_train, double n_min_obs_per_node, double n_ratio_per_node, bool use_gradient, int size_burnin, int size_backfitting, int thin, vec prob_moves, double lambda_0, double a_prior_lambda, double b_prior_lambda, double a_prior_omega, double b_prior_omega, bool update_lambda, double alpha_tree, double beta_tree, bool output_BART_ensembles, bool quiet);
RcppExport SEXP _balancePM_run_adaboost(SEXP XSEXP, SEXP group_labelsSEXP, SEXP num_treesSEXP, SEXP max_resolSEXP, SEXP learn_rateSEXP, SEXP L_candidatesSEXP, SEXP alpha_cutpointSEXP, SEXP labels_trainSEXP, SEXP n_min_obs_per_nodeSEXP, SEXP n_ratio_per_nodeSEXP, SEXP use_gradientSEXP, SEXP size_burninSEXP, SEXP size_backfittingSEXP, SEXP thinSEXP, SEXP prob_movesSEXP, SEXP lambda_0SEXP, SEXP a_prior_lambdaSEXP, SEXP b_prior_lambdaSEXP, SEXP a_prior_omegaSEXP, SEXP b_prior_omegaSEXP, SEXP update_lambdaSEXP, SEXP alpha_treeSEXP, SEXP beta_treeSEXP, SEXP output_BART_ensemblesSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< ivec >::type group_labels(group_labelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type max_resol(max_resolSEXP);
    Rcpp::traits::input_parameter< double >::type learn_rate(learn_rateSEXP);
    Rcpp::traits::input_parameter< vec >::type L_candidates(L_candidatesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_cutpoint(alpha_cutpointSEXP);
    Rcpp::traits::input_parameter< ivec >::type labels_train(labels_trainSEXP);
    Rcpp::traits::input_parameter< double >::type n_min_obs_per_node(n_min_obs_per_nodeSEXP);
    Rcpp::traits::input_parameter< double >::type n_ratio_per_node(n_ratio_per_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_gradient(use_gradientSEXP);
    Rcpp::traits::input_parameter< int >::type size_burnin(size_burninSEXP);
    Rcpp::traits::input_parameter< int >::type size_backfitting(size_backfittingSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< vec >::type prob_moves(prob_movesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< double >::type a_prior_lambda(a_prior_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type b_prior_lambda(b_prior_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a_prior_omega(a_prior_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type b_prior_omega(b_prior_omegaSEXP);
    Rcpp::traits::input_parameter< bool >::type update_lambda(update_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tree(alpha_treeSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tree(beta_treeSEXP);
    Rcpp::traits::input_parameter< bool >::type output_BART_ensembles(output_BART_ensemblesSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(run_adaboost(X, group_labels, num_trees, max_resol, learn_rate, L_candidates, alpha_cutpoint, labels_train, n_min_obs_per_node, n_ratio_per_node, use_gradient, size_burnin, size_backfitting, thin, prob_moves, lambda_0, a_prior_lambda, b_prior_lambda, a_prior_omega, b_prior_omega, update_lambda, alpha_tree, beta_tree, output_BART_ensembles, quiet));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_balance_weight_boosting
List evaluate_balance_weight_boosting(List tree_list, mat eval_points);
RcppExport SEXP _balancePM_evaluate_balance_weight_boosting(SEXP tree_listSEXP, SEXP eval_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< mat >::type eval_points(eval_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_balance_weight_boosting(tree_list, eval_points));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_balance_weight_BART
List evaluate_balance_weight_BART(List forest_list, mat eval_points);
RcppExport SEXP _balancePM_evaluate_balance_weight_BART(SEXP forest_listSEXP, SEXP eval_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type forest_list(forest_listSEXP);
    Rcpp::traits::input_parameter< mat >::type eval_points(eval_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_balance_weight_BART(forest_list, eval_points));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_balancePM_rotation_matrix", (DL_FUNC) &_balancePM_rotation_matrix, 1},
    {"_balancePM_run_adaboost", (DL_FUNC) &_balancePM_run_adaboost, 25},
    {"_balancePM_evaluate_balance_weight_boosting", (DL_FUNC) &_balancePM_evaluate_balance_weight_boosting, 2},
    {"_balancePM_evaluate_balance_weight_BART", (DL_FUNC) &_balancePM_evaluate_balance_weight_BART, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_balancePM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
